// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: amiibo/v1/amiibo.proto

package amiibov1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _amiibo_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetAmiiboRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetAmiiboRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetName()) < 1 {
		return GetAmiiboRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
	}

	return nil
}

// GetAmiiboRequestValidationError is the validation error returned by
// GetAmiiboRequest.Validate if the designated constraints aren't met.
type GetAmiiboRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAmiiboRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAmiiboRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAmiiboRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAmiiboRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAmiiboRequestValidationError) ErrorName() string { return "GetAmiiboRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAmiiboRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAmiiboRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAmiiboRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAmiiboRequestValidationError{}

// Validate checks the field values on GetAmiiboResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetAmiiboResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAmiibo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAmiiboResponseValidationError{
					field:  fmt.Sprintf("Amiibo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetAmiiboResponseValidationError is the validation error returned by
// GetAmiiboResponse.Validate if the designated constraints aren't met.
type GetAmiiboResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAmiiboResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAmiiboResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAmiiboResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAmiiboResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAmiiboResponseValidationError) ErrorName() string {
	return "GetAmiiboResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAmiiboResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAmiiboResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAmiiboResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAmiiboResponseValidationError{}

// Validate checks the field values on Amiibo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Amiibo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Character

	// no validation rules for Name

	// no validation rules for AmiiboSerioes

	// no validation rules for ImageUrl

	// no validation rules for Type

	return nil
}

// AmiiboValidationError is the validation error returned by Amiibo.Validate if
// the designated constraints aren't met.
type AmiiboValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AmiiboValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AmiiboValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AmiiboValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AmiiboValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AmiiboValidationError) ErrorName() string { return "AmiiboValidationError" }

// Error satisfies the builtin error interface
func (e AmiiboValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAmiibo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AmiiboValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AmiiboValidationError{}
